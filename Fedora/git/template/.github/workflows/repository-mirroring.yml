name: Chocolatine workflow

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'

env:
  MIRROR_URL: 'git@github.com:EpitechPGEPromo2029/B-PSU-200-BDX-2-1-42sh-mathias.dumoulin.git'
  MIRROR_REPO: 'EpitechPGEPromo2029/B-PSU-200-BDX-2-1-42sh-mathias.dumoulin'
  EXECUTABLES: "42sh"

jobs:
  check_repository:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.repository }}" == "${{ env.MIRROR_REPO }}" ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  check_coding_style:
    needs: [check_repository]
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    if: ${{ needs.check_repository.outputs.should_run == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)

      - name: Display coding style errors
        id: check_errors
        if: always()
        run: |
          if [ -s coding-style-reports.log ]; then
            cat coding-style-reports.log | while read line; do
              file_path=$(echo "$line" | cut -d: -f1)
              line_num=$(echo "$line" | cut -d: -f2)
              error_type=$(echo "$line" | cut -d: -f3)
              error_msg=$(echo "$line" | cut -d: -f4)
              echo "::error file=$file_path,line=$line_num::$error_type: $error_msg"
            done
            echo "has_errors=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "has_errors=false" >> $GITHUB_OUTPUT
          fi

  check_program_compilation:
    needs: [check_coding_style]
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Compile program
        run: make
        timeout-minutes: 2

      - name: Clean compilation artifacts
        run: make clean
        if: always()

      - name: Check executables
        run: |
          for executable in $(echo $EXECUTABLES | tr ',' ' '); do
            if [ ! -f "$executable" ]; then
              echo "::error::Executable '$executable' not found"
              exit 1
            fi
            if [ ! -x "$executable" ]; then
              echo "::error::File '$executable' is not executable"
              exit 1
            fi
            echo "Executable '$executable' found and is executable"
          done

  run_unitests:
    runs-on:
      ubuntu-latest
    needs: [check_program_compilation]
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Unit Tests
        id: run_tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [run_unitests]
    if: ${{ github.event_name == 'push' && success() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}